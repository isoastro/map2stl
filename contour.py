import numpy as np
import tile
import imageio

CONTOUR_REGION_SIZE = 5

colormap = np.array(
    [
        [ 47,   0, 135, ],
        [ 50,   0, 138, ],
        [ 53,   0, 140, ],
        [ 56,   0, 142, ],
        [ 59,   0, 144, ],
        [ 62,   0, 146, ],
        [ 65,   0, 148, ],
        [ 68,   0, 150, ],
        [ 70,   0, 151, ],
        [ 73,   0, 153, ],
        [ 76,   0, 154, ],
        [ 79,   0, 156, ],
        [ 81,   0, 157, ],
        [ 84,   0, 158, ],
        [ 87,   0, 160, ],
        [ 89,   0, 161, ],
        [ 92,   0, 162, ],
        [ 95,   0, 163, ],
        [ 98,   0, 164, ],
        [100,   0, 165, ],
        [103,   0, 166, ],
        [106,   0, 166, ],
        [109,   0, 167, ],
        [111,   0, 168, ],
        [114,   0, 168, ],
        [117,   0, 168, ],
        [119,   0, 169, ],
        [122,   0, 169, ],
        [125,   0, 169, ],
        [127,   0, 169, ],
        [130,   0, 169, ],
        [133,   0, 169, ],
        [135,   0, 168, ],
        [138,   0, 168, ],
        [140,   0, 167, ],
        [143,   0, 167, ],
        [145,   0, 166, ],
        [148,   0, 165, ],
        [150,   0, 164, ],
        [152,   0, 163, ],
        [155,   0, 162, ],
        [157,   3, 161, ],
        [160,   7, 159, ],
        [162,  11, 158, ],
        [164,  15, 156, ],
        [166,  19, 155, ],
        [168,  22, 153, ],
        [171,  26, 151, ],
        [173,  29, 150, ],
        [175,  32, 148, ],
        [177,  35, 146, ],
        [179,  37, 144, ],
        [181,  40, 142, ],
        [183,  43, 141, ],
        [185,  45, 139, ],
        [187,  48, 137, ],
        [189,  51, 135, ],
        [190,  53, 133, ],
        [192,  56, 131, ],
        [194,  58, 129, ],
        [196,  61, 127, ],
        [198,  63, 125, ],
        [199,  66, 124, ],
        [201,  68, 122, ],
        [203,  70, 120, ],
        [204,  73, 118, ],
        [206,  75, 116, ],
        [208,  78, 114, ],
        [209,  80, 113, ],
        [211,  82, 111, ],
        [212,  85, 109, ],
        [214,  87, 107, ],
        [215,  90, 106, ],
        [217,  92, 104, ],
        [218,  94, 102, ],
        [220,  97, 100, ],
        [221,  99,  99, ],
        [222, 102,  97, ],
        [224, 104,  95, ],
        [225, 107,  93, ],
        [226, 109,  92, ],
        [228, 112,  90, ],
        [229, 114,  88, ],
        [230, 117,  86, ],
        [231, 119,  85, ],
        [232, 122,  83, ],
        [234, 124,  81, ],
        [235, 127,  79, ],
        [236, 129,  77, ],
        [237, 132,  76, ],
        [238, 135,  74, ],
        [239, 137,  72, ],
        [239, 140,  70, ],
        [240, 143,  68, ],
        [241, 146,  67, ],
        [242, 148,  65, ],
        [242, 151,  63, ],
        [243, 154,  61, ],
        [244, 157,  59, ],
        [244, 160,  57, ],
        [245, 163,  55, ],
        [245, 166,  54, ],
        [245, 168,  52, ],
        [246, 171,  50, ],
        [246, 174,  48, ],
        [246, 178,  46, ],
        [246, 181,  44, ],
        [246, 184,  43, ],
        [246, 187,  41, ],
        [246, 190,  39, ],
        [245, 193,  37, ],
        [245, 196,  36, ],
        [245, 200,  34, ],
        [244, 203,  33, ],
        [244, 206,  32, ],
        [243, 209,  31, ],
        [242, 213,  30, ],
        [241, 216,  30, ],
        [240, 219,  29, ],
        [239, 223,  29, ],
        [238, 226,  29, ],
        [237, 230,  29, ],
        [235, 233,  30, ],
        [234, 237,  30, ],
        [232, 240,  30, ],
        [231, 244,  29, ],
        [229, 247,  27, ],
        [228, 250,  21, ],
    ]
).astype(np.uint8)

BLACK = np.array([0, 0, 0]).astype(np.uint8)
GRAY = np.array([72, 72, 72]).astype(np.uint8)
WHITE = np.array([255, 255, 255]).astype(np.uint8)

# Corners are ordered (MSb first)
#   0   1
#   +---+
#   |   |
#   +---+
#   3   2
contours = np.zeros((16, CONTOUR_REGION_SIZE, CONTOUR_REGION_SIZE))
contours[0] = np.array(  # 0000 (0)
    [
        [0, 0, 0, 0, 0, ],
        [0, 0, 0, 0, 0, ],
        [0, 0, 0, 0, 0, ],
        [0, 0, 0, 0, 0, ],
        [0, 0, 0, 0, 0, ],
    ]
)
contours[1] = np.array(  # 0001 (1)
    [
        [0, 0, 0, 0, 0, ],
        [0, 0, 0, 0, 0, ],
        [1, 0, 0, 0, 0, ],
        [0, 1, 0, 0, 0, ],
        [0, 0, 1, 0, 0, ],
    ]
)
contours[2] = np.array(  # 0010 (2)
    [
        [0, 0, 0, 0, 0, ],
        [0, 0, 0, 0, 0, ],
        [0, 0, 0, 0, 1, ],
        [0, 0, 0, 1, 0, ],
        [0, 0, 1, 0, 0, ],
    ]
)
contours[3] = np.array(  # 0011 (3)
    [
        [0, 0, 0, 0, 0, ],
        [0, 0, 0, 0, 0, ],
        [1, 1, 1, 1, 1, ],
        [0, 0, 0, 0, 0, ],
        [0, 0, 0, 0, 0, ],
    ]
)
contours[4] = np.array(  # 0100 (4)
    [
        [0, 0, 1, 0, 0, ],
        [0, 0, 0, 1, 0, ],
        [0, 0, 0, 0, 1, ],
        [0, 0, 0, 0, 0, ],
        [0, 0, 0, 0, 0, ],
    ]
)
contours[5] = np.array(  # 0101 (5)
    [
        [0, 0, 1, 0, 0, ],
        [0, 1, 0, 0, 0, ],
        [1, 0, 0, 0, 1, ],
        [0, 0, 0, 1, 0, ],
        [0, 0, 1, 0, 0, ],
    ]
)
contours[6] = np.array(  # 0110 (6)
    [
        [0, 0, 1, 0, 0, ],
        [0, 0, 1, 0, 0, ],
        [0, 0, 1, 0, 0, ],
        [0, 0, 1, 0, 0, ],
        [0, 0, 1, 0, 0, ],
    ]
)
contours[7] = np.array(  # 0111 (0)
    [
        [0, 0, 1, 0, 0, ],
        [0, 1, 0, 0, 0, ],
        [1, 0, 0, 0, 0, ],
        [0, 0, 0, 0, 0, ],
        [0, 0, 0, 0, 0, ],
    ]
)
contours[8] = contours[7]  # 1000 (8)
contours[9] = contours[6]  # 1001 (9)
contours[10] = np.array(  # 1010 (0)
    [
        [0, 0, 1, 0, 0, ],
        [0, 0, 0, 1, 0, ],
        [1, 0, 0, 0, 1, ],
        [0, 1, 0, 0, 0, ],
        [0, 0, 1, 0, 0, ],
    ]
)
contours[11] = contours[4]  # 1011 (11)
contours[12] = contours[3]  # 1100 (12)
contours[13] = contours[2]  # 1101 (13)
contours[14] = contours[1]  # 1110 (14)
contours[15] = contours[0]  # 1111 (15)


def get_case(thresholded_region):
    i, j = [0, 0, 1, 1], [0, 1, 1, 0]
    bits = thresholded_region[i, j].astype(np.uint8)
    return np.packbits(bits)[0] >> 4


if __name__ == '__main__':
    corner1 = (46.915952, -121.818551)
    corner2 = (46.792267, -121.687303)
    zoom = 12

    tmap = tile.TileMap(corner1, corner2, zoom)

    num_levels = 50
    min_elevation = tmap.elevation.min()
    max_elevation = tmap.elevation.max()
    elevations = np.linspace(min_elevation, max_elevation, num_levels + 2)[1:-1]  # Drop first and last

    color_indices = np.linspace(0, len(colormap) - 1, num_levels).round().astype(np.int_)
    colors = colormap[color_indices]

    nrows, ncols = tmap.elevation.shape
    image = np.ones((nrows * CONTOUR_REGION_SIZE, ncols * CONTOUR_REGION_SIZE, 3)).astype(np.uint8) * WHITE

    for elev, color in zip(elevations, colors):
        thresholded = tmap.elevation >= elev
        for i in range(nrows - 1):
            for j in range(ncols - 1):
                ii = i * CONTOUR_REGION_SIZE
                jj = j * CONTOUR_REGION_SIZE

                thresholded_region = thresholded[i:i+2, j:j+2]
                case = get_case(thresholded_region)
                threshi, threshj = np.where(contours[case] == 1)
                threshi += ii
                threshj += jj
                image[threshi, threshj] = BLACK
        print(f'Done with elevation {elev}', flush=True)

    imageio.imwrite('contour.png', image)